---
- name: Reconfigure replica set vote members
  hosts: all
  tasks:
    - name: Set base facts
      ansible.builtin.set_fact:
        _votes1_failed: false
        _votes2_failed: false
        _votes4_failed: false
        _votes6_failed: false
        _all_votes_failed: false
        _unexpected_votes_failed: false
        _mixed_votes_failed: false
        _string_votes_failed: false
        _map_format: 'nephelaiio.plugins.map_format'
        _addr_attrs: ['ansible_default_ipv4', 'address']
        _non_voting_1: "{{ play_hosts[:1] }}"
        _non_voting_2: "{{ play_hosts[:2] }}"
        _non_voting_4: "{{ play_hosts[-4:] }}"
        _non_voting_6: "{{ play_hosts[-6:] }}"
        _mongodb_port: "{{ mongodb_port | default('27017') }}"

    - name: Create virtualenv
      ansible.builtin.tempfile:
        state: directory
        prefix: .virtualenv
        path: "~"
      register: _virtualenv_tmpdir
      changed_when: false

    - name: Initialize virtualenv
      ansible.builtin.pip:
        name:
          - pymongo
          - python-gnupg
        virtualenv: "{{ _virtualenv_tmpdir.path }}/venv"
      changed_when: false

    - name: Change python interpreter
      ansible.builtin.set_fact:
        ansible_python_interpreter: "{{ _virtualenv_tmpdir.path }}/venv/bin/python"

    - name: Test votes reconfiguration scenarios
      block:
        - name: Set 6 non-votes members
          block:
            - name: Set votes member facts
              ansible.builtin.set_fact:
                mongodb_votes: "{{ _votes }}"
                mongodb_priority: "{{ _votes }}"
              vars:
                _votes: "{{ 1 if not inventory_hostname in _non_voting_6 else 0 }}"

            - name: Configure 6 non-votes members
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_six"
                mongodb_non_votes_group: "_replicaset_non_votes_six"
                mongodb_voting_group: "_replicaset_voting_six"
                mongodb_priority_group: "_replicaset_priority_six"
                mongodb_non_priority_group: "_replicaset_non_priority_six"
                mongodb_compliant_group: "_replicaset_compliant_six"
                mongodb_non_compliant_group: "_replicaset_non_compliant_six"
                mongodb_non_voting_group: "_replicaset_non_voting_six"
                mongodb_alien_group: "_replicaset_alien_six"
                mongodb_non_alien_group: "_replicaset_non_alien_six"
                mongodb_member_group: "_replicaset_member_six"
                mongodb_failed_group: "_replicaset_failed_six"

            - name: Query existing MongoDB replicaset config
              community.mongodb.mongodb_shell:
                eval: "rs.conf().members"
                mongo_cmd: "{{ mongodb_shell | default(omit) }}"
              register: mongodb_config
              changed_when: false

            - name: Set non-voter member facts
              ansible.builtin.set_fact:
                _non_voters: "{{ _existing_config | selectattr('host', 'in', _members_non_voters) }}"
              vars:
                _addresses: "{{ _non_voting_6 | map('extract', hostvars, _addr_attrs) }}"
                _members_non_voters: "{{ _addresses | map(_map_format, '%s:' + _mongodb_port) | list }}"
                _existing_config: "{{ mongodb_config.transformed_output | list }}"

            - name: Debug non-voter members
              ansible.builtin.debug:
                var: _non_voters

            - name: Check non-voter members
              ansible.builtin.assert:
                that: _members_list | select('in', _addresses) | length == 6
              vars:
                _addresses: "{{ _non_voting_6 | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _non_voters | map(attribute='host') }}"
                _members_list: "{{ _members | map('split', ':') | map('first') }}"

        - name: Attempt votes and priorities defined as string
          block:
            - name: Set vote facts
              ansible.builtin.set_fact:
                mongodb_votes: "{{ _votes }}"
                mongodb_priority: "{{ _priority }}"
              vars:
                _votes: "{{ 1 if not inventory_hostname in _non_voting_6 else 'bla' }}"
                _priority: "{{ 1 if not inventory_hostname in _non_voting_6 else 'bla' }}"

            - name: Attempt votes and priorities defined as string
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_string"
                mongodb_non_votes_group: "_replicaset_non_votes_string"
                mongodb_voting_group: "_replicaset_voting_string"
                mongodb_priority_group: "_replicaset_priority_string"
                mongodb_non_priority_group: "_replicaset_non_priority_string"
                mongodb_compliant_group: "_replicaset_compliant_string"
                mongodb_non_compliant_group: "_replicaset_non_compliant_string"
                mongodb_non_voting_group: "_replicaset_non_voting_string"
                mongodb_alien_group: "_replicaset_alien_string"
                mongodb_non_alien_group: "_replicaset_non_alien_string"
                mongodb_member_group: "_replicaset_member_string"
                mongodb_failed_group: "_replicaset_failed_string"
          rescue:
            - name: Set result facts
              ansible.builtin.set_fact:
                _string_votes_failed: true
          always:
            - name: Fail on broken replicaset member configuration
              ansible.builtin.assert:
                that: _string_votes_failed
                fail_msg: "broken replicaset member configuration operation must fail"

        - name: Set 4 non-votes members
          block:
            - name: Set votes member facts
              ansible.builtin.set_fact:
                mongodb_votes: "{{ _votes }}"
                mongodb_priority: "{{ _votes }}"
              vars:
                _votes: "{{ 1 if not inventory_hostname in _non_voting_4 else 0 }}"

            - name: Configure 4 non-vote members
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_four"
                mongodb_non_votes_group: "_replicaset_non_votes_four"
                mongodb_voting_group: "_replicaset_voting_four"
                mongodb_priority_group: "_replicaset_priority_four"
                mongodb_non_priority_group: "_replicaset_non_priority_four"
                mongodb_compliant_group: "_replicaset_compliant_four"
                mongodb_non_compliant_group: "_replicaset_non_compliant_four"
                mongodb_non_voting_group: "_replicaset_non_voting_four"
                mongodb_alien_group: "_replicaset_alien_four"
                mongodb_non_alien_group: "_replicaset_non_alien_four"
                mongodb_member_group: "_replicaset_member_four"
                mongodb_failed_group: "_replicaset_failed_four"

            - name: Query existing MongoDB replicaset config
              community.mongodb.mongodb_shell:
                eval: "rs.conf().members"
                mongo_cmd: "{{ mongodb_shell | default(omit) }}"
              register: mongodb_config
              changed_when: false

            - name: Set non-voter member facts
              ansible.builtin.set_fact:
                _non_voters: "{{ _existing_config | selectattr('host', 'in', _members_non_voters) }}"
              vars:
                _addresses: "{{ _non_voting_4 | map('extract', hostvars, _addr_attrs) }}"
                _members_non_voters: "{{ _addresses | map(_map_format, '%s:' + _mongodb_port) | list }}"
                _existing_config: "{{ mongodb_config.transformed_output | list }}"

            - name: Debug non-voter members
              ansible.builtin.debug:
                var: _non_voters

            - name: Check non-voter members
              ansible.builtin.assert:
                that: _members_list | select('in', _addresses) | length == 4
              vars:
                _addresses: "{{ _non_voting_4 | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _non_voters | map(attribute='host') }}"
                _members_list: "{{ _members | map('split', ':') | map('first') }}"

        - name: Attempt mixed votes and priorities
          block:
            - name: Set voting member facts
              ansible.builtin.set_fact:
                mongodb_votes: 1
                mongodb_priority: 1
              when: not inventory_hostname in _non_voting_4

            - name: Set mixed voting member facts
              ansible.builtin.set_fact:
                mongodb_priority: 1
                mongodb_votes: 0
              when: inventory_hostname in _non_voting_4

            - name: Attempt mixed votes and priorities
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_mixed"
                mongodb_non_votes_group: "_replicaset_non_votes_mixed"
                mongodb_voting_group: "_replicaset_voting_mixed"
                mongodb_priority_group: "_replicaset_priority_mixed"
                mongodb_non_priority_group: "_replicaset_non_priority_mixed"
                mongodb_compliant_group: "_replicaset_compliant_mixed"
                mongodb_non_compliant_group: "_replicaset_non_compliant_mixed"
                mongodb_non_voting_group: "_replicaset_non_voting_mixed"
                mongodb_alien_group: "_replicaset_alien_mixed"
                mongodb_non_alien_group: "_replicaset_non_alien_mixed"
                mongodb_member_group: "_replicaset_member_mixed"
                mongodb_failed_group: "_replicaset_failed_mixed"
          rescue:
            - name: Set result facts
              ansible.builtin.set_fact:
                _mixed_votes_failed: true
          always:
            - name: Fail on broken replicaset member configuration
              ansible.builtin.assert:
                that: _mixed_votes_failed
                fail_msg: "broken replicaset member configuration operation must fail"

        - name: Attempt all voting members
          block:
            - name: Set vote and priority facts
              ansible.builtin.set_fact:
                mongodb_votes: 1
                mongodb_priority: 1

            - name: Attempt all voting members
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_all"
                mongodb_non_votes_group: "_replicaset_non_votes_all"
                mongodb_voting_group: "_replicaset_voting_all"
                mongodb_priority_group: "_replicaset_priority_all"
                mongodb_non_priority_group: "_replicaset_non_priority_all"
                mongodb_compliant_group: "_replicaset_compliant_all"
                mongodb_non_compliant_group: "_replicaset_non_compliant_all"
                mongodb_non_voting_group: "_replicaset_non_voting_all"
                mongodb_alien_group: "_replicaset_alien_all"
                mongodb_non_alien_group: "_replicaset_non_alien_all"
                mongodb_member_group: "_replicaset_member_all"
                mongodb_failed_group: "_replicaset_failed_all"
          rescue:
            - name: Set result facts
              ansible.builtin.set_fact:
                _all_votes_failed: true
          always:
            - name: Fail on broken replicaset member configuration
              ansible.builtin.assert:
                that: _all_votes_failed
                fail_msg: "broken replicaset member configuration operation must fail"

        - name: Attempt votes greater than 1
          block:
            - name: Set vote facts
              ansible.builtin.set_fact:
                mongodb_votes: 2
                mongodb_priority: 1

            - name: Attempt votes greater than 1
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_greater"
                mongodb_non_votes_group: "_replicaset_non_votes_greater"
                mongodb_voting_group: "_replicaset_voting_greater"
                mongodb_priority_group: "_replicaset_priority_greater"
                mongodb_non_priority_group: "_replicaset_non_priority_greater"
                mongodb_compliant_group: "_replicaset_compliant_greater"
                mongodb_non_compliant_group: "_replicaset_non_compliant_greater"
                mongodb_non_voting_group: "_replicaset_non_voting_greater"
                mongodb_alien_group: "_replicaset_alien_greater"
                mongodb_non_alien_group: "_replicaset_non_alien_greater"
                mongodb_member_group: "_replicaset_member_greater"
                mongodb_failed_group: "_replicaset_failed_greater"
          rescue:
            - name: Set result facts
              ansible.builtin.set_fact:
                _unexpected_votes_failed: true
          always:
            - name: Fail on broken replicaset member configuration
              ansible.builtin.assert:
                that: _unexpected_votes_failed
                fail_msg: "broken replicaset member configuration operation must fail"

        - name: Attempt 1 voting member
          block:
            - name: Set voting facts
              ansible.builtin.set_fact:
                mongodb_votes: "{{ _votes }}"
                mongodb_priority: "{{ _priority }}"
              vars:
                _votes: "{{ 1 if not inventory_hostname in _non_voting_1 else 0 }}"
                _priority: "{{ 1 if not inventory_hostname in _non_voting_1 else 0 }}"

            - name: Attempt 1 voting members
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_one"
                mongodb_non_votes_group: "_replicaset_non_votes_one"
                mongodb_voting_group: "_replicaset_voting_one"
                mongodb_priority_group: "_replicaset_priority_one"
                mongodb_non_priority_group: "_replicaset_non_priority_one"
                mongodb_compliant_group: "_replicaset_compliant_one"
                mongodb_non_compliant_group: "_replicaset_non_compliant_one"
                mongodb_non_voting_group: "_replicaset_non_voting_one"
                mongodb_alien_group: "_replicaset_alien_one"
                mongodb_non_alien_group: "_replicaset_non_alien_one"
                mongodb_member_group: "_replicaset_member_one"
                mongodb_failed_group: "_replicaset_failed_one"
          rescue:
            - name: Set result facts
              ansible.builtin.set_fact:
                _votes1_failed: true
          always:
            - name: Fail on broken replicaset member configuration
              ansible.builtin.assert:
                that: _votes1_failed
                fail_msg: "broken replicaset member configuration operation must fail"

        - name: Set 2 non-votes members
          block:
            - name: Set voting facts
              ansible.builtin.set_fact:
                mongodb_votes: "{{ _votes }}"
                mongodb_priority: "{{ _priority }}"
              vars:
                _votes: "{{ 1 if not inventory_hostname in _non_voting_2 else 0 }}"
                _priority: "{{ 1 if not inventory_hostname in _non_voting_2 else 0 }}"

            - name: Configure 7 replicaset voting members
              ansible.builtin.include_role:
                name: pokerops.mongodb
              vars:
                _addresses: "{{ play_hosts | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _addresses | list }}"
                mongodb_replicaset_members: "{{ _members | map(_map_format, '%s:' + _mongodb_port) | list }}"
                mongodb_votes_group: "_replicaset_votes_two"
                mongodb_non_votes_group: "_replicaset_non_votes_two"
                mongodb_voting_group: "_replicaset_voting_two"
                mongodb_priority_group: "_replicaset_priority_two"
                mongodb_non_priority_group: "_replicaset_non_priority_two"
                mongodb_compliant_group: "_replicaset_compliant_two"
                mongodb_non_compliant_group: "_replicaset_non_compliant_two"
                mongodb_non_voting_group: "_replicaset_non_voting_two"
                mongodb_alien_group: "_replicaset_alien_two"
                mongodb_non_alien_group: "_replicaset_non_alien_two"
                mongodb_member_group: "_replicaset_member_two"
                mongodb_failed_group: "_replicaset_failed_two"

            - name: Query existing MongoDB replicaset config
              community.mongodb.mongodb_shell:
                eval: "rs.conf().members"
                mongo_cmd: "{{ mongodb_shell | default(omit) }}"
              register: mongodb_config
              changed_when: false

            - name: Set non-voter member facts
              ansible.builtin.set_fact:
                _non_voters: "{{ _existing_config | selectattr('host', 'in', _members_non_voters) }}"
              vars:
                _addresses: "{{ _non_voting_2 | map('extract', hostvars, _addr_attrs) }}"
                _members_non_voters: "{{ _addresses | map(_map_format, '%s:' + _mongodb_port) | list }}"
                _existing_config: "{{ mongodb_config.transformed_output | list }}"

            - name: Debug non-voter members
              ansible.builtin.debug:
                var: _non_voters

            - name: Check non-voter members
              ansible.builtin.assert:
                that: _members_list | select('in', _addresses) | length == 2
              vars:
                _addresses: "{{ _non_voting_2 | map('extract', hostvars, _addr_attrs) }}"
                _members: "{{ _non_voters | map(attribute='host') }}"
                _members_list: "{{ _members | map('split', ':') | map('first') }}"
