---
- name: Manage replicaset
  tags: replicaset
  when: mongodb_replicaset_name | default('') != ''
  block:
    - name: Query MongoDB replicaset members
      community.mongodb.mongodb_shell:
        eval: "rs.status().members"
        mongo_cmd: "{{ mongodb_shell | default(omit) }}"
      retries: "{{ mongodb_query_retries }}"
      delay: "{{ mongodb_query_delay }}"
      register: mongodb_status
      until: mongodb_status is succeeded
      ignore_errors: true
      changed_when: false

    - name: Set MongoDB replicaset member facts
      ansible.builtin.set_fact:
        _replicaset_alien: "{{ _is_alien | bool }}"
        _replicaset_member: "{{ _is_member | bool }}"
        _replicaset_voters: "{{ _has_votes | bool }}"
        _replicaset_priority: "{{ _has_priority | bool }}"
      vars:
        _status: "{{ mongodb_status }}"
        _has_failed: "{{ _status.failed | bool }}"
        _message: "{{ _status.msg }}"
        _is_alien: "{{ _has_failed and (_message is search('no replset config has been received')) }}"
        _is_member: "{{ not _has_failed and not _is_alien }}"
        _has_votes: "{{ mongodb_votes is defined }}"
        _has_priority: "{{ mongodb_priority is defined }}"

    - name: Group MongoDB members
      ansible.builtin.group_by:
        key: "_replicaset_{{ 'alien' if _replicaset_alien else _status }}"
      vars:
        _status: "{{ 'member' if _replicaset_member else 'failed' }}"
      changed_when: false

    - name: Group MongoDB voters members
      ansible.builtin.group_by:
        key: "_replicaset_{{ 'voters' if _replicaset_voters else 'non_voters' }}"
      changed_when: false

    - name: Compute MongoDB member facts
      ansible.builtin.set_fact:
        replicaset_aliens: "{{ groups['_replicaset_alien'] | default([]) }}"
        replicaset_members: "{{ groups['_replicaset_member'] | default([]) }}"
        replicaset_failures: "{{ groups['_replicaset_failed'] | default([]) }}"
        replicaset_voters: "{{ groups['_replicaset_voters'] | default([]) }}"
        replicaset_non_voters: "{{ groups['_replicaset_non_voters'] | default([]) }}"
        replicaset_priority: "{{ groups['_replicaset_voters'] | default([]) }}"

    - name: Verify MongoDB replicaset status
      ansible.builtin.assert:
        that:
          - (replicaset_members | length > 0) or (replicaset_aliens | length > 0)
          - replicaset_failures | length == 0
          - _max_voters_validation and _max_non_voters_validation
          - _all_voters or _missing_voters
          - mongodb_priority | default('1') | int <= '1000' | int
      vars:
        _non_voters_count: "{{ replicaset_non_voters }}"
        _voters_count: "{{ replicaset_voters }}"
        _max_voters_validation: "{{ _voters_count | length <= '7' | int }}"
        _max_non_voters_validation: "{{ _non_voters_count | length <= '43' | int }}"
        _all_voters: "{{ (_voters_count | length > 0) and (_non_voters_count | length == 0) }}"
        _missing_voters: "{{ (_voters_count | length == 0) and (_non_voters_count | length > 0) }}"

    - name: Compute MongoDB member votes and priorities
      ansible.builtin.set_fact:
        _mongodb_votes: "{{ mongodb_votes if _is_voter else _default_votes }}"
        _mongodb_priority: "{{ mongodb_priority if _has_priority else _default_priority }}"
      vars:
        _default_votes: 1
        _default_priority: 1
        _is_voter: "{{ inventory_hostname in replicaset_voters }}"
        _has_priority: "{{ inventory_hostname in replicaset_priority }}"

    - name: Initialize MongoDB replicaset
      run_once: true
      when:
        - mongodb_replicaset_init | bool
        - replicaset_members | length == 0
        - replicaset_aliens | length > 0
      block:
        - name: Create MongoDB replicaset
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            validate: false

        - name: Wait for replicaset to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: 5
            interval: 10
          retries: "{{ mongodb_converge_retries }}"
          delay: "{{ mongodb_converge_delay }}"
          register: mongodb_rs
          until: mongodb_rs is succeeded

    - name: Query replicaset membership
      community.mongodb.mongodb_shell:
        eval: "rs.isMaster().ismaster"
      retries: "{{ mongodb_query_retries }}"
      delay: "{{ mongodb_query_delay }}"
      register: mongodb_rs
      until: mongodb_rs is succeeded
      changed_when: false

    - name: Set replicaset primary facts
      ansible.builtin.set_fact:
        replicaset_primary: "{{ mongodb_rs.transformed_output | list | first | bool }}"

    - name: Manage existing MongoDB replicaset
      when:
        - mongodb_replicaset_init | bool
        - replicaset_members | length > 0
      block:
        - name: Build address fact dictionary
          ansible.builtin.set_fact:
            _revaddrs: "{{ _host_addrs | zip(_hosts) | community.general.dict }}"
            _fwdaddrs: "{{ _hosts | zip(_host_addrs) | community.general.dict }}"
            _map_format: 'nephelaiio.plugins.map_format'
            _split_with: 'nephelaiio.plugins.split_with'
          vars:
            _hosts: "{{ ansible_play_hosts }}"
            _host_addrs: "{{ _hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"

        - name: Set MongoDB member facts
          ansible.builtin.set_fact:
            _existing_members: "{{ _existing_addrs | map(_map_format, '%s:' + mongodb_port) }}"
          vars:
            _existing_addrs: "{{ replicaset_members | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"

        - name: Detect new cluster members
          ansible.builtin.set_fact:
            _mongodb_add_members: "{{ _add_members }}"
          vars:
            _existing_hosts: "{{ _existing_members | map(_split_with, ':') | map('first') }}"
            _existing_inventory: "{{ _existing_hosts | select('in', _fwdaddrs) }}"
            _existing_inventory_addrs: "{{ _existing_inventory | map('extract', _fwdaddrs) }}"
            _existing_host_addrs: "{{ _existing_hosts | ansible.utils.ipaddr }}"
            _existing_addrs: "{{ _existing_inventory_addrs + _existing_host_addrs }}"
            _existing_iphosts: "{{ _existing_addrs | map(_map_format, '%s:' + mongodb_port) }}"
            _existing_revaddrs: "{{ _existing_addrs | select('in', _revaddrs) }}"
            _existing_revnames: "{{ _existing_revaddrs | map('extract', _revaddrs) }}"
            _existing_revhosts: "{{ _existing_revnames | map(_map_format, '%s:' + mongodb_port) }}"
            _existing_hostaddrs: "{{ _existing_members + _existing_iphosts + _existing_revhosts }}"
            _add_members: "{{ mongodb_replicaset_members | reject('in', _existing_hostaddrs) }}"

        - name: Detect stale cluster hosts
          ansible.builtin.set_fact:
            _mongodb_delete_members: "{{ _delete_members }}"
          vars:
            _target_members: "{{ mongodb_replicaset_members }}"
            _target_hosts: "{{ _target_members | map(_split_with, ':') | map('first') }}"
            _target_inventory: "{{ _target_hosts | select('in', _fwdaddrs) }}"
            _target_inventory_addrs: "{{ _target_inventory | map('extract', _fwdaddrs) }}"
            _target_host_addrs: "{{ _target_hosts | ansible.utils.ipaddr }}"
            _target_addrs: "{{ _target_inventory_addrs + _target_host_addrs }}"
            _target_iphosts: "{{ _target_addrs | map(_map_format, '%s:' + mongodb_port) }}"
            _target_revaddrs: "{{ _target_addrs | select('in', _revaddrs) }}"
            _target_revnames: "{{ _target_revaddrs | map('extract', _revaddrs) }}"
            _target_revhosts: "{{ _target_revnames | map(_map_format, '%s:' + mongodb_port) }}"
            _target_hostaddrs: "{{ _target_members + _target_iphosts + _target_revhosts }}"
            _delete_members: "{{ _existing_members | reject('in', _target_hostaddrs) }}"

        - name: Debug target members
          ansible.builtin.debug:
            msg: "Target members are [{{ mongodb_replicaset_members | join(',') }}]"

        - name: Debug cluster facts
          ansible.builtin.debug:
            msg: "Detected cluster members [{{ _existing_members | join(',') }}]"

        - name: Debug new cluster members
          ansible.builtin.debug:
            msg: "Adding cluster members [{{ _mongodb_add_members | join(',') }}]"

        - name: Debug stale cluster members
          ansible.builtin.debug:
            msg: "Removing cluster members [{{ _mongodb_delete_members | join(',') }}]"

        - name: Manage MongoDB replicaset members
          when:
            - (_mongodb_add_members + _mongodb_delete_members) | length > 0
            - replicaset_primary | bool
            - mongodb_replicaset_update | bool
          block:
            - name: Gather MongoDB version
              community.mongodb.mongodb_info:
                filter: general
              changed_when: false
              register: mongodb_installed_version

            - name: Manage existing MongoDB replicaset members
              ansible.builtin.include_tasks: "reconfigure.yml"
              vars:
                _existing_member: true
              loop: "{{ _existing_members }}"

            - name: Add new MongoDB replicaset members
              ansible.builtin.include_tasks: "reconfigure.yml"
              vars:
                _add_member: true
                _mongodb_info: "{{ mongodb_installed_version.general }}"
                _mongodb_version: "{{ _mongodb_info.version }}"
              loop: "{{ _mongodb_add_members }}"

            - name: Remove stale MongoDB replicaset members
              ansible.builtin.include_tasks: "reconfigure.yml"
              vars:
                _remove_member: true
              loop: "{{ _mongodb_delete_members }}"

    - name: Allow read operations on secondary replicaset members
      community.mongodb.mongodb_shell:
        eval: "rs.secondaryOk()"
      changed_when: false
      run_once: true
      when: replicaset_primary
