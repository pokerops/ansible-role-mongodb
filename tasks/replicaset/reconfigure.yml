---
- name: Query existing MongoDB replicaset config
  community.mongodb.mongodb_shell:
    eval: "rs.conf().members"
    mongo_cmd: "{{ mongodb_shell | default(omit) }}"
  retries: "{{ mongodb_query_retries }}"
  delay: "{{ mongodb_query_delay }}"
  register: mongodb_config
  until: mongodb_config is succeeded
  changed_when: false

- name: Set MongoDB replicaset member facts
  ansible.builtin.set_fact:
    _existing_members: "{{ _members_list }}"
  vars:
    _select_attrs: 'nephelaiio.plugins.select_attributes'
    _members_list: "{{ mongodb_config.transformed_output | map(_select_attrs, _attrs) | list }}"
    _attrs:
      - host
      - priority
      - hidden
      - votes

- name: Manage MongoDB existing members
  when: _existing_member | default('false') | bool
  block:
    - name: Manage existing member from MongoDB replicaset
      community.mongodb.mongodb_replicaset:
        replica_set: "{{ mongodb_replicaset_name }}"
        members: "{{ _members_list + [_update_member] }}"
        reconfigure: true
        validate: false
      vars:
        _member_addr: "{{ item | split(':') | first }}"
        _member_filter: "{{ _revaddrs[_member_addr] }}"
        _existing_config: "{{ mongodb_config.transformed_output | list }}"
        _update_member_config: "{{ _existing_config | selectattr('host', 'equalto', item) | list | first }}"
        _update_priority: "{{ hostvars[_member_filter]['_mongodb_priority'] }}"
        _update_votes: "{{ hostvars[_member_filter]['_mongodb_votes'] }}"
        _members_list: "{{ _existing_members | rejectattr('host', 'equalto', item) }}"
        _votes_query: "{{ _update_votes | int != _update_member_config.votes | int }}"
        _priority_query: "{{ _update_priority | int != _update_member_config.priority | int }}"
        _update_member: "{{
          {
            'host': item,
            'hidden': false,
            'votes': _update_votes | int,
            'priority': _update_priority | int
          }
        }}"
      when: (_votes_query or _priority_query) or (_votes_query and _priority_query)

- name: Manage MongoDB new members
  when: _add_member | default('false') | bool
  block:

    - name: Add MongoDB new members as hidden
      when: _mongodb_version is version('5.0.0', '<')
      block:

        - name: Add new member to MongoDB replicaset
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ _existing_members + [_update_member] }}"
            reconfigure: true
            validate: false
          vars:
            _update_member:
              host: "{{ item }}"
              hidden: true
              votes: 0
              priority: 0

        - name: Wait for replicaset to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: "{{ mongodb_reconfig_poll }}"
            interval: "{{ mongodb_reconfig_interval }}"
          retries: "{{ mongodb_converge_retries }}"
          delay: "{{ mongodb_converge_delay }}"
          register: mongodb_status
          until: mongodb_status is succeeded
          changed_when: false

    - name: Enable MongoDB replicaset new member votes
      community.mongodb.mongodb_replicaset:
        replica_set: "{{ mongodb_replicaset_name }}"
        members: "{{ _existing_members + [_update_member] }}"
        reconfigure: true
        validate: false
      vars:
        _member_addr: "{{ item | split(':') | first }}"
        _member_filter: "{{ _revaddrs[_member_addr] }}"
        _priority: "{{ hostvars[_member_filter]['_mongodb_priority'] }}"
        _votes: "{{ hostvars[_member_filter]['_mongodb_votes'] }}"
        _update_member: "{{
          {
            'host': item,
            'hidden': false,
            'votes': _votes | int,
            'priority': _priority | int
          }
        }}"

- name: Wait for replicaset to stabilize
  community.mongodb.mongodb_status:
    replica_set: "{{ mongodb_replicaset_name }}"
    validate: minimal
    poll: "{{ mongodb_reconfig_poll }}"
    interval: "{{ mongodb_reconfig_interval }}"
  retries: "{{ mongodb_converge_retries }}"
  delay: "{{ mongodb_converge_delay }}"
  register: mongodb_status
  until: mongodb_status is succeeded
  changed_when: false
